{"version":3,"file":"static/js/48.4b881c14.chunk.js","mappings":"wNAsHA,MAlHA,YAAqC,IAAD,gBAAbA,EAAa,EAAbA,WACrB,GAKIC,EAAAA,EAAAA,MAJFC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aACAC,EAJF,EAIEA,MAIIC,GAAWC,EAAAA,EAAAA,QAAO,CAAC,GAGzB,OAFAD,EAASE,QAAUH,EAAM,aAGvB,iCACE,gBAAKI,UAAU,aAAf,uCACA,kBAAMC,SAAUN,EAAaL,GAA7B,WACE,iBAAKU,UAAU,gBAAf,WACE,oCACMR,EAAS,WAAY,CAAEU,UAAU,EAAMC,UAAW,KADxD,IAEEC,YAAY,qBACZJ,UAAU,gBAEe,cAA1B,UAAAP,EAAOY,gBAAP,eAAiBC,QAChB,gBAAKN,UAAU,mBAAf,2DAEyB,eAA1B,UAAAP,EAAOY,gBAAP,eAAiBC,QAChB,gBAAKN,UAAU,uBAAf,qHAIF,oCACMR,EAAS,WAAY,CAAEU,UAAU,EAAMC,UAAW,KADxD,IAEEG,KAAK,WACLC,aAAa,MACbH,YAAY,2BACZJ,UAAU,gBAEe,cAA1B,UAAAP,EAAOI,gBAAP,eAAiBS,QAChB,gBAAKN,UAAU,mBAAf,2DAEyB,eAA1B,UAAAP,EAAOI,gBAAP,eAAiBS,QAChB,gBAAKN,UAAU,mBAAf,2HAIF,oCACMR,EAAS,gBAAiB,CAC5BgB,SAAU,SAACC,GAAD,OAAWA,IAAUZ,EAASE,OAA9B,KAFd,IAIEO,KAAK,WACLC,aAAa,MACbH,YAAY,wCACZJ,UAAU,gBAEoB,cAA/B,UAAAP,EAAOiB,qBAAP,eAAsBJ,QACrB,gBAAKN,UAAU,mBAAf,2DAE8B,cAA/B,UAAAP,EAAOiB,qBAAP,eAAsBJ,QACrB,gBAAKN,UAAU,mBAAf,gGAIF,oCACMR,EAAS,OAAQ,CAAEU,UAAU,KADnC,IAEEE,YAAY,eACZJ,UAAU,gBAEW,cAAtB,UAAAP,EAAOkB,YAAP,eAAaL,QACZ,gBAAKN,UAAU,mBAAf,4DAEF,iBAAKA,UAAU,mBAAf,WACE,oCACMR,EAAS,YAAa,CACxBU,UAAU,EACVU,eAAe,KAHnB,IAKEZ,UAAU,SACVa,GAAG,KACHP,KAAK,QACLG,MAAM,QAER,kBACET,UAAU,kEACVc,QAAQ,KAFV,UAIE,iBAAMd,UAAU,UAAhB,wBAEF,oCACMR,EAAS,YAAa,CACxBU,UAAU,EACVU,eAAe,KAHnB,IAKEZ,UAAU,SACVa,GAAG,KACHP,KAAK,QACLG,MAAM,QAER,kBACET,UAAU,kEACVc,QAAQ,KAFV,UAIE,iBAAMd,UAAU,UAAhB,6BAIsB,cAA3B,UAAAP,EAAOsB,iBAAP,eAAkBT,QACjB,gBAAKN,UAAU,mBAAf,4DAEF,kBAAOM,KAAK,SAASG,MAAM,2BAAOT,UAAU,qBAInD,E,wCCzFD,MAnBA,WACE,IAAMgB,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAcjB,OAAO,SAAC,EAAD,CAAc7B,WAZF,SAAC8B,GAClBJ,GAASK,EAAAA,EAAAA,IAAaD,IACnBE,SACAC,MAAK,WACJL,EAAS,eACTM,EAAAA,GAAAA,QAAc,wCACf,IACAC,OAAM,SAACC,GACNF,EAAAA,GAAAA,MAAYE,EAAIC,QACjB,GACJ,GAGF,C","sources":["component/auth/register/RegisterComp.jsx","component/pages/auth/register/RegisterPage.jsx"],"sourcesContent":["import React, { useCallback, useRef } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\n\nfunction RegisterComp({onRegister}) {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n    watch,\n  } = useForm();\n\n  // Password Match\n  const password = useRef({});\n  password.current = watch(\"password\");\n\n  return (\n    <>\n      <div className=\"page_title\">회원가입</div>\n      <form onSubmit={handleSubmit(onRegister)}>\n        <div className=\"register_form\">\n          <input\n            {...register(\"username\", { required: true, minLength: 4 })}\n            placeholder=\"아이디\"\n            className=\"input_text\"\n          />\n          {errors.username?.type === \"required\" && (\n            <div className=\"validation-error\">필수 항목 입니다.</div>\n          )}\n          {errors.username?.type === \"minLength\" && (\n            <div className=\"validation-error-500\">\n              아이디는 최소 4글자 이상이어야 합니다.\n            </div>\n          )}\n          <input\n            {...register(\"password\", { required: true, minLength: 3 })}\n            type=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"비밀번호\"\n            className=\"input_text\"\n          />\n          {errors.password?.type === \"required\" && (\n            <div className=\"validation-error\">필수 항목 입니다.</div>\n          )}\n          {errors.password?.type === \"minLength\" && (\n            <div className=\"validation-error\">\n              비밀번호는 최소 8글자 이상이어야 합니다.\n            </div>\n          )}\n          <input\n            {...register(\"passwordCheck\", {\n              validate: (value) => value === password.current,\n            })}\n            type=\"password\"\n            autoComplete=\"off\"\n            placeholder=\"비밀번호 확인\"\n            className=\"input_text\"\n          />\n          {errors.passwordCheck?.type === \"required\" && (\n            <div className=\"validation-error\">필수 항목 입니다.</div>\n          )}\n          {errors.passwordCheck?.type === \"validate\" && (\n            <div className=\"validation-error\">\n              비밀번호가 일치하지 않습니다.\n            </div>\n          )}\n          <input\n            {...register(\"name\", { required: true })}\n            placeholder=\"이름\"\n            className=\"input_text\"\n          />\n          {errors.name?.type === \"required\" && (\n            <div className=\"validation-error\">필수 항목 입니다.</div>\n          )}\n          <div className=\"grid grid-cols-6\">\n            <input\n              {...register(\"userClass\", {\n                required: true,\n                valueAsNumber: true,\n              })}\n              className=\"hidden\"\n              id=\"co\"\n              type=\"radio\"\n              value=\"1\"\n            />\n            <label\n              className=\"col-span-3 cursor-pointer border border-gray-50 p-4 text-center\"\n              htmlFor=\"co\"\n            >\n              <span className=\"text-xl\">1반</span>\n            </label>\n            <input\n              {...register(\"userClass\", {\n                required: true,\n                valueAsNumber: true,\n              })}\n              className=\"hidden\"\n              id=\"ct\"\n              type=\"radio\"\n              value=\"2\"\n            />\n            <label\n              className=\"col-span-3 cursor-pointer border border-gray-50 p-4 text-center\"\n              htmlFor=\"ct\"\n            >\n              <span className=\"text-xl\">2반</span>\n            </label>\n          </div>\n        </div>\n        {errors.userClass?.type === \"required\" && (\n          <div className=\"validation-error\">필수 항목 입니다.</div>\n        )}\n        <input type=\"submit\" value=\"회원가입\" className=\"confirm-btn\" />\n      </form>\n    </>\n  );\n}\n\nexport default RegisterComp;\n","import React from \"react\";\n\nimport RegisterComp from \"../../../auth/register/RegisterComp\";\nimport { SET_REGISTER } from \"../../../../store/features/authSlice\";\nimport { toast } from \"react-toastify\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router\";\n\nfunction RegisterPage() {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n\n  const onRegister = (data) => {\n    dispatch(SET_REGISTER(data))\n      .unwrap()\n      .then(() => {\n        navigate(\"/auth/login\");\n        toast.success(\"회원가입 성공\");\n      })\n      .catch((err) => {\n        toast.error(err.message);\n      });\n  };\n\n  return <RegisterComp onRegister={onRegister}/>;\n}\n\nexport default RegisterPage;\n"],"names":["onRegister","useForm","register","errors","formState","handleSubmit","watch","password","useRef","current","className","onSubmit","required","minLength","placeholder","username","type","autoComplete","validate","value","passwordCheck","name","valueAsNumber","id","htmlFor","userClass","dispatch","useDispatch","navigate","useNavigate","data","SET_REGISTER","unwrap","then","toast","catch","err","message"],"sourceRoot":""}